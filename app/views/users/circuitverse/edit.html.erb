<% content_for :title, t("users.circuitverse.edit_profile.title", name: @profile.name) %>
<div class="container projects-new-container">
  <div class="row center-row">
    <div class="col-12 col-sm-12 col-md-12 col-lg-12">
      <h1 class="submain-heading"><%= t("users.circuitverse.edit_profile.heading") %></h1>
      <p class="main-description"><%= t("users.circuitverse.edit_profile.description_html") %></p>
      <br>
    </div>
  </div>
  <div class="row">
    <div class="col col-sm col-md col-lg">
      <div class="form-container">
        <%= form_with model: @profile, multipart: true, url: { action: "update" }, local: true do |f| %>
          <% if @profile.errors.any? %>
            <div class="error-message">
              <ul class="mt-3 mb-3">
                <% @profile.errors.full_messages.each do |message| %>
                  <li><%= message %></li>
                <% end %>
              </ul>
            </div>
          <% end %>
          <div class="field mb-3">
            <h6><%= f.label :name %><sup><i class="fa fa-asterisk users-edit-asterisk"></i></sup></h6>
            <%= f.text_field :name, required: true, class: "form-control form-input", autofocus: true %>
          </div>
          <div class="field mb-3">
            <h6><%= t("users.circuitverse.edit_profile.profile_picture") %></h6>
            <p><%= image_tag user_profile_picture(@profile.profile_picture), id:'imgedit', class:"users-edit-image", alt:'User Profile Image' %></p>
            <label for="profile_picture" class="users-edit-image-button"><%= t("users.circuitverse.edit_profile.choose_file") %></label>
            <input tabindex="0" type="file" accept="image/png, .jpeg, .jpg" class="users-edit-image-button-hidden" id="profile_picture" name="user[profile_picture]" onchange="openImageEditor(this);" value="<%= @profile.profile_picture %>">
            <%= f.check_box :remove_picture, id: "remove_pic", class: "remove-pic" %>
            <label for="remove_pic" class="users-remove-image-button"><%= t("users.circuitverse.edit_profile.remove_picture") %></label>
          </div>
          <div class="field mb-3">
            <h6><%= f.label :country %></h6>
            <%= f.country_select :country, { include_blank: t("users.circuitverse.edit_profile.country_select_placeholder"), priority_countries: get_priority_countries }, class: "form-control form-input" %>
          </div>
          <div class="field mb-3">
            <h6><%= f.label :educational_institute %></h6>
            <%= f.text_field :educational_institute, { class: "autocomplete form-control form-input", autocomplete: "off" } %>
          </div>
          <div class="field mb-3">
            <h6><%= f.label :locale %></h6>
            <%= f.select :locale, options_for_select(I18nSupport.locale_names, f.object.locale), { prompt: t("users.circuitverse.edit_profile.select_locale_prompt") }, { class: "form-control form-input" } %>
          </div>
          <div class="field mb-3 users-edit-primary-checkpoint">
            <label for="profile_subscribed" class="primary-checkpoint-container"><h6><%= t("users.circuitverse.edit_profile.subscribe_mail_checkpoint") %></h6>
              <%= f.check_box :subscribed, checked: @profile.subscribed?, id: "profile_subscribed" %>
              <div class="primary-checkpoint"></div>
            </label>
          </div>
          <button type="submit" class="btn primary-button users-edit-primary-button"><%= t("save") %></button>
          <%= link_to t("back"), :back, class: "anchor-text" %>
        <% end %>
        <div class="row">
          <div class="col-12 col-sm-12 col-md-12 col-lg-12">
            <h4 class="submain-heading"><%= t("users.circuitverse.edit_profile.delete_account_heading") %></h4>
            <p><%= t("users.circuitverse.edit_profile.delete_account_notice") %></p> <br>
          </div>
        </div>
        <%= link_to t("users.circuitverse.edit_profile.delete_account"), "#", class: "btn primary-delete-button", data: { bs_toggle: "modal", bs_target: "#deleteuserModal", currentuser: @profile.id } %>
      </div>
    </div>
  </div>
</div>
<%= render partial: "users/circuitverse/delete_user_confirmation_modal" %>

<!-- Cropper Modal for Image Editing -->
<div id="imageEditorModal" class="modal fade" tabindex="-1" role="dialog">
  <div class="modal-dialog modal-lg" role="document">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title">Edit Profile Picture</h5>
        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
      </div>
      <div class="modal-body">
        <div>
          <img id="imageEditor" style="max-width: 100%;" />
        </div>
      </div>
      <div class="modal-footer">
        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
        <button type="button" class="btn btn-primary" id="saveEditedImage">Save</button>
      </div>
    </div>
  </div>
</div>

<!-- JavaScript for Cropper and Image Editing -->
<script src="https://cdn.jsdelivr.net/npm/cropperjs@1.5.13/dist/cropper.min.js"></script>
<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/cropperjs@1.5.13/dist/cropper.min.css" />

<script>
let cropper;

// Open image editor modal and initialize cropper
function openImageEditor(input) {
  if (input.files && input.files[0]) {
    const reader = new FileReader();
    reader.onload = function (e) {
      const imageEditor = document.getElementById("imageEditor");
      imageEditor.src = e.target.result;
      const modal = new bootstrap.Modal(
        document.getElementById("imageEditorModal")
      );
      modal.show();

      // Initialize or reinitialize cropper
      if (cropper) {
        cropper.destroy();
      }
      cropper = new Cropper(imageEditor, {
        aspectRatio: 1,
        viewMode: 2,
      });
    };
    reader.readAsDataURL(input.files[0]);
  }
}

// Save the edited image
document
  .getElementById("saveEditedImage")
  .addEventListener("click", function () {
    const canvas = cropper.getCroppedCanvas();
    if (canvas) {
      canvas.toBlob((blob) => {
        const file = new File([blob], "edited-image.jpg", { type: "image/jpeg" });
        const dataTransfer = new DataTransfer();
        dataTransfer.items.add(file);

        // Update the file input
        const input = document.getElementById("profile_picture");
        input.files = dataTransfer.files;

        // Update the preview image
        const imgEdit = document.getElementById("imgedit");
        const url = URL.createObjectURL(blob);
        imgEdit.src = url;

        // Clean up and close the modal
        const closeButton = document.querySelector("#imageEditorModal .btn-close");
        closeButton.click();

        // Reset cropper to avoid memory issues
        if (cropper) {
          cropper.destroy();
          cropper = null;
        }
      });
    }
  });

// Cancel the edit and remove preview
document
  .querySelector("#imageEditorModal .btn-close")
  .addEventListener("click", function () {
    // Reset input value and preview image
    const input = document.getElementById("profile_picture");
    const imgEdit = document.getElementById("imgedit");
    const imageEditor = document.getElementById("imageEditor");

    input.value = "";
    imgEdit.src = '<%= image_path("thumb/Default.jpg") %>'; // Reset preview to default
    imageEditor.src = ""; // Clear the editor image

    // Destroy cropper if initialized
    if (cropper) {
      cropper.destroy();
      cropper = null;
    }
  });

</script>
